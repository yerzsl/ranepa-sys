
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
import sqlite3
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler
from config import FIO, DEPARTMENT, AUDIENCE, PROBLEM, CHAT_ID, SPECIALISTS, HELP_TYPE, COMMENT  # –î–æ–±–∞–≤—å—Ç–µ COMMENT
from database import Database
from keyboards import (
    get_main_keyboard, get_problem_keyboard, remove_keyboard, 
    get_application_actions_keyboard, get_completion_keyboard,
    get_printer_subkeyboard, get_computer_subkeyboard, get_internet_subkeyboard,
    get_software_subkeyboard, get_projector_subkeyboard, get_audio_subkeyboard,
    get_rating_keyboard, get_specialists_keyboard, get_transfer_acceptance_keyboard,
    get_help_type_keyboard
)
from datetime import datetime
from config import FIO, DEPARTMENT, AUDIENCE, PROBLEM, COMMENT, HELP_TYPE  # –ó–¥–µ—Å—å COMMENT —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å

logger = logging.getLogger(__name__)
db = Database()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
bot_messages_to_delete = {}

async def handle_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–µ–Ω—é' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await start(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = db.get_user(user_id)
        if user_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
            user_name = user_data[1]
            
            welcome_text = (
                "üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RANEPA.SYSTEM!*\n\n"
                f"üëã –†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å, *{user_name}*!\n\n"
                "‚ú® *–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è:*\n"
                "‚Ä¢ –ë—ã—Å—Ç—Ä–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
                "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π\n"
                "‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏\n\n"
                "üí° *–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:*\n"
                "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º\n"
                "‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫\n"
                "‚Ä¢ –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å —Å –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–æ–π\n"
                "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ—á–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "üöÄ *–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?*\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            try:
                with open('def.png', 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=welcome_text,
                        reply_markup=get_main_keyboard(),
                        parse_mode='Markdown'
                    )
                logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π def.png –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
                
            except FileNotFoundError:
                logger.warning("–§–∞–π–ª def.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ def.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(
                    welcome_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
            
            return ConversationHandler.END
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        registration_text = (
            "üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RANEPA.SYSTEM!*\n\n"
            "‚ú® *–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏* –†–æ—Å—Å–∏–π—Å–∫–æ–π –∞–∫–∞–¥–µ–º–∏–∏ –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞ –∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã\n\n"
            "üöÄ *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã:*\n"
            "‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ üì± –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n"
            "‚Ä¢ üîî –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ üìä –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ üë• –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n\n"
            "üíº *–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–º –Ω—É–∂–Ω–æ:*\n"
            "1Ô∏è‚É£ –í–∞—à–µ –§–ò–û - –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–∏\n"
            "2Ô∏è‚É£ –í–∞—à –æ—Ç–¥–µ–ª/–∫–∞—Ñ–µ–¥—Ä–∞ - –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫\n\n"
            "üîí *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã* –∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n\n"
            "üìù *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?*\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–§–ò–û* –ø–æ–ª–Ω–æ—Å—Ç—å—é:"
        )
        
        sent_message = await update.message.reply_text(
            registration_text,
            reply_markup=remove_keyboard(),
            parse_mode='Markdown'
        )
        
        bot_messages_to_delete[user_id] = [sent_message.message_id]
        return FIO
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        return ConversationHandler.END

async def get_fio(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û"""
    try:
        user_id = update.message.from_user.id
        context.user_data['user_name'] = update.message.text
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            await update.message.delete()
            
            if user_id in bot_messages_to_delete:
                for msg_id in bot_messages_to_delete[user_id]:
                    try:
                        await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                bot_messages_to_delete[user_id] = []
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        sent_message = await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–¥–µ–ª/–∫–∞—Ñ–µ–¥—Ä—É:",
            reply_markup=remove_keyboard()
        )
        
        if user_id not in bot_messages_to_delete:
            bot_messages_to_delete[user_id] = []
        bot_messages_to_delete[user_id].append(sent_message.message_id)
        
        return DEPARTMENT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_fio: {e}")
        return ConversationHandler.END

async def get_department(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª–∞/–∫–∞—Ñ–µ–¥—Ä—ã"""
    try:
        user_id = update.message.from_user.id
        user_name = context.user_data['user_name']
        user_info = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.save_user(user_id, user_name, user_info)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        try:
            await update.message.delete()
            
            if user_id in bot_messages_to_delete:
                for msg_id in bot_messages_to_delete[user_id]:
                    try:
                        await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                bot_messages_to_delete[user_id] = []
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        welcome_final_text = (
            f"üéâ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
            f"üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!*\n\n"
            "‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É RANEPA.SYSTEM!*\n\n"
            "üè¢ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"
            f"‚Ä¢ üë§ *–§–ò–û:* {user_name}\n"
            f"‚Ä¢ üìç *–û—Ç–¥–µ–ª/–∫–∞—Ñ–µ–¥—Ä–∞:* {user_info}\n\n"
            "üöÄ *–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:*\n"
            "‚Ä¢ üì® –°–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            "‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
            "‚Ä¢ üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ\n"
            "‚Ä¢ ‚≠ê –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è\n\n"
            "üí° *–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç* –≤–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n"
            "üìã *–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?*\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *¬´–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª* –Ω–∏–∂–µ üëá"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        try:
            with open('def.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=welcome_final_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π def.png –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}")
            
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª def.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(
                welcome_final_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ def.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(
                welcome_final_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_department: {e}")
        return ConversationHandler.END

async def start_application(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    try:
        user_id = update.message.from_user.id
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        sent_message = await update.message.reply_text(
            "–í –∫–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞?",
            reply_markup=remove_keyboard()
        )
        
        if user_id not in bot_messages_to_delete:
            bot_messages_to_delete[user_id] = []
        bot_messages_to_delete[user_id].append(sent_message.message_id)
        
        return AUDIENCE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_application: {e}")
        return ConversationHandler.END

async def get_audience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    try:
        user_id = update.message.from_user.id
        context.user_data['audience'] = update.message.text
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            await update.message.delete()
            
            if user_id in bot_messages_to_delete:
                for msg_id in bot_messages_to_delete[user_id]:
                    try:
                        await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                bot_messages_to_delete[user_id] = []
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ–º–æ—â–∏
        help_type_text = (
            "üí° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–æ—â–∏:*\n\n"
            "‚Ä¢ üíª *–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–º–æ—â—å* - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ–º–æ–∂–µ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ\n"
            "  (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ü–û, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —É–¥–∞–ª–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n\n"
            "‚Ä¢ üîß *–ü–æ–º–æ—â—å –≤ –æ—á–Ω–æ–π —Ñ–æ—Ä–º–µ* - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–∏–µ–¥–µ—Ç –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—é\n"
            "  (—Ä–µ–º–æ–Ω—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è, –∑–∞–º–µ–Ω–∞ –¥–µ—Ç–∞–ª–µ–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–ø–ø–∞—Ä–∞—Ç—É—Ä—ã)\n\n"
            "üìù *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá*"
        )
        
        sent_message = await update.message.reply_text(
            help_type_text,
            reply_markup=get_help_type_keyboard(),
            parse_mode='Markdown'
        )
        
        if user_id not in bot_messages_to_delete:
            bot_messages_to_delete[user_id] = []
        bot_messages_to_delete[user_id].append(sent_message.message_id)
        
        return HELP_TYPE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_audience: {e}")
        return ConversationHandler.END

async def get_problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    try:
        user_id = update.message.from_user.id
        user_message = update.message.text
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if user_message in ["üíª –ö–æ–º–ø—å—é—Ç–µ—Ä", "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä", 
                           "‚öôÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ", "üì∫ –ü—Ä–æ–µ–∫—Ç–æ—Ä/–¢–µ–ª–µ–≤–∏–∑–æ—Ä", 
                           "üé§ –ê—É–¥–∏–æ"]:
            
            context.user_data['main_category'] = user_message
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if user_message == "üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä":
                subkeyboard = get_printer_subkeyboard()
                sub_text = "üñ®Ô∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º/—Å–∫–∞–Ω–µ—Ä–æ–º:*"
            elif user_message == "üíª –ö–æ–º–ø—å—é—Ç–µ—Ä":
                subkeyboard = get_computer_subkeyboard()
                sub_text = "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:*"
            elif user_message == "üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç":
                subkeyboard = get_internet_subkeyboard()
                sub_text = "üåê *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º:*"
            elif user_message == "‚öôÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ":
                subkeyboard = get_software_subkeyboard()
                sub_text = "‚öôÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å –ü–û:*"
            elif user_message == "üì∫ –ü—Ä–æ–µ–∫—Ç–æ—Ä/–¢–µ–ª–µ–≤–∏–∑–æ—Ä":
                subkeyboard = get_projector_subkeyboard()
                sub_text = "üì∫ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–µ–∫—Ç–æ—Ä–æ–º/—Ç–µ–ª–µ–≤–∏–∑–æ—Ä–æ–º:*"
            elif user_message == "üé§ –ê—É–¥–∏–æ":
                subkeyboard = get_audio_subkeyboard()
                sub_text = "üé§ *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–≤—É–∫–æ–º:*"
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            try:
                if user_id in bot_messages_to_delete:
                    for msg_id in bot_messages_to_delete[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                    bot_messages_to_delete[user_id] = []
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ë–ï–ó –∫–∞—Ä—Ç–∏–Ω–∫–∏
            sent_message = await update.message.reply_text(
                sub_text,
                reply_markup=subkeyboard,
                parse_mode='Markdown'
            )
            
            bot_messages_to_delete[user_id].append(sent_message.message_id)
            return PROBLEM        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        elif user_message == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø—Ä–æ–±–ª–µ–º—ã":
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            try:
                if user_id in bot_messages_to_delete:
                    for msg_id in bot_messages_to_delete[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                    bot_messages_to_delete[user_id] = []
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤—ã–±–æ—Ä—É
            problem_text = (
                "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã*\n\n"
                "üí° *–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:*\n\n"
                "‚Ä¢ üíª *–ö–æ–º–ø—å—é—Ç–µ—Ä* - –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –∏–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
                "‚Ä¢ üåê *–ò–Ω—Ç–µ—Ä–Ω–µ—Ç* - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–æ–ª–≥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n"
                "‚Ä¢ üñ®Ô∏è *–ü—Ä–∏–Ω—Ç–µ—Ä* - –∑–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –∑–∞–º—è—Ç–∏–µ, —Å–∫–∞–Ω–µ—Ä\n"
                "‚Ä¢ üì∫ *–ü—Ä–æ–µ–∫—Ç–æ—Ä/–¢–µ–ª–µ–≤–∏–∑–æ—Ä* - –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–≤—É–∫–∞\n"
                "‚Ä¢ ‚öôÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ* - —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º\n"
                "‚Ä¢ üé§ *–ê—É–¥–∏–æ* - –∑–∞–ø–∏—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ ‚ùì *–î—Ä—É–≥–æ–µ* - –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n\n"
                "üìù *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá*"
            )
            
            sent_message = await update.message.reply_text(
                problem_text,
                reply_markup=get_problem_keyboard(),
                parse_mode='Markdown'
            )
            
            bot_messages_to_delete[user_id].append(sent_message.message_id)
            return PROBLEM
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä "–î—Ä—É–≥–æ–µ"
        elif user_message == "‚ùì –î—Ä—É–≥–æ–µ":
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            sent_message = await update.message.reply_text(
                "‚úçÔ∏è *–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
                "üìã *–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ?*\n"
                "üìç *–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞?*\n"
                "‚è∞ *–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å?*\n\n"
                "üí° *–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ, —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –º—ã –ø–æ–º–æ–∂–µ–º!*",
                reply_markup=remove_keyboard(),
                parse_mode='Markdown'
            )
            
            bot_messages_to_delete[user_id].append(sent_message.message_id)
            context.user_data['waiting_for_problem_description'] = True
            return PROBLEM
        
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ "–î—Ä—É–≥–æ–µ"
        elif context.user_data.get('waiting_for_problem_description'):
            problem = user_message
            context.user_data.pop('waiting_for_problem_description', None)
            return await create_application(update, context, problem)
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        else:
            main_category = context.user_data.get('main_category', '')
            
            if main_category:
                problem = f"{main_category}: {user_message}"
            else:
                problem = user_message
            
            return await create_application(update, context, problem)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_problem: {e}")
        return ConversationHandler.END

async def create_application(update: Update, context: ContextTypes.DEFAULT_TYPE, problem: str) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏"""
    try:
        user_id = update.message.from_user.id
        audience = context.user_data['audience']
        help_type = context.user_data.get('help_type', 'üîß –ü–æ–º–æ—â—å –≤ –æ—á–Ω–æ–π —Ñ–æ—Ä–º–µ')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è
        
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏: user_id={user_id}, audience={audience}, help_type={help_type}, problem={problem}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ save_application)
        application_id, user_name, user_department = db.save_application(user_id, audience, problem, help_type)
        
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: id={application_id}, user_name={user_name}, department={user_department}")
        
        if application_id:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            try:
                await update.message.delete()
                
                if user_id in bot_messages_to_delete:
                    for msg_id in bot_messages_to_delete[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                    bot_messages_to_delete[user_id] = []
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏
            application_text = (
                f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                f"üë§ *–û—Ç:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìã *–¢–∏–ø –ø–æ–º–æ—â–∏:* {help_type}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üïê *–í—Ä–µ–º—è:* {update.message.date.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"‚ö° *–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!*"
            )
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
                with open('new.png', 'rb') as photo:
                    sent_message = await context.bot.send_photo(
                        chat_id=CHAT_ID,
                        photo=photo,
                        caption=application_text,
                        reply_markup=get_application_actions_keyboard(application_id),
                        parse_mode='Markdown'
                    )
                
                context.bot_data[f"application_{application_id}"] = sent_message.message_id
                db.save_application_message_id(application_id, sent_message.message_id)
                
                logger.info(f"–ó–∞—è–≤–∫–∞ #{application_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {CHAT_ID} —Å message_id {sent_message.message_id}")
                
            except FileNotFoundError:
                logger.warning("–§–∞–π–ª new.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
                sent_message = await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=application_text,
                    reply_markup=get_application_actions_keyboard(application_id),
                    parse_mode='Markdown'
                )
                
                context.bot_data[f"application_{application_id}"] = sent_message.message_id
                db.save_application_message_id(application_id, sent_message.message_id)
                
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ new.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏")
                sent_message = await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=application_text,
                    reply_markup=get_application_actions_keyboard(application_id),
                    parse_mode='Markdown'
                )
                
                context.bot_data[f"application_{application_id}"] = sent_message.message_id
                db.save_application_message_id(application_id, sent_message.message_id)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            user_confirmation = (
                "‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É!*\n\n"
                f"üìã *–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:* #{application_id}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìã *–¢–∏–ø –ø–æ–º–æ—â–∏:* {help_type}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n\n"
                "‚è±Ô∏è *–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:*\n"
                "‚Ä¢ üü¢ –û–±—ã—á–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ—Ç–≤–µ—á–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç\n\n"
                "üîî *–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–∏–º–µ—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É!*"
            )
            
            try:
                with open('zvaccept.png', 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=user_confirmation,
                        reply_markup=get_main_keyboard(),
                        parse_mode='Markdown'
                    )
                logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π zvaccept.png –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
            except FileNotFoundError:
                logger.warning("–§–∞–π–ª zvaccept.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(
                    user_confirmation,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ zvaccept.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                await update.message.reply_text(
                    user_confirmation,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop('main_category', None)
        context.user_data.pop('waiting_for_problem_description', None)
        context.user_data.pop('help_type', None)
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_application: {e}")
        return ConversationHandler.END

async def handle_application_action(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π (–ø—Ä–∏–Ω—è—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)"""
    query = update.callback_query
    await query.answer()
    
    try:
        action, application_id = query.data.split('_')
        application_id = int(application_id)
        specialist_id = query.from_user.id
        specialist_name = SPECIALISTS.get(specialist_id, f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {specialist_id}")
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è {action} –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist_name}")
        
        if action == 'accept':
            # –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏
            success, application_data = db.accept_application(application_id, specialist_id, specialist_name)
            
            if success and application_data:
                user_id = application_data[0] if len(application_data) > 0 else None
                user_name = application_data[1] if len(application_data) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                user_department = application_data[2] if len(application_data) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                audience = application_data[3] if len(application_data) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                problem = application_data[4] if len(application_data) > 4 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                application_text = (
                    f"‚úÖ *–ü–†–ò–ù–Ø–¢–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                    f"üë§ *–û—Ç:* {user_name}\n"
                    f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                    f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                    f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                    f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
                    f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {query.message.date.strftime('%d.%m.%Y %H:%M')}"
                )
                
                try:
                    await query.edit_message_caption(
                        caption=application_text,
                        reply_markup=get_completion_keyboard(application_id),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: {e}, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç")
                    await query.edit_message_text(
                        text=application_text,
                        reply_markup=get_completion_keyboard(application_id),
                        parse_mode='Markdown'
                    )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if user_id:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ *–í–∞—à—É –ó–∞—è–≤–∫—É: #{application_id} –û–¥–æ–±—Ä–∏–ª–∏!*\n\n"
                                 f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
                                 f"‚è±Ô∏è *–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç–∏—è:* {query.message.date.strftime('%d.%m.%Y %H:%M')}\n"
                                 f"üìç *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—é* {audience}\n\n"
                                 f"üìû *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É*",
                            parse_mode='Markdown'
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
                try:
                    await query.message.reply_text(
                        f"üõ†Ô∏è *{specialist_name}* –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É *#{application_id}* –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∞—É–¥–∏—Ç–æ—Ä–∏—é *{audience}*",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
                
            else:
                await query.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º", show_alert=True)
                
        elif action == 'reject':
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            success, application_data = db.reject_application(application_id)
            
            if success and application_data:
                user_id = application_data[0] if len(application_data) > 0 else None
                user_name = application_data[1] if len(application_data) > 1 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                user_department = application_data[2] if len(application_data) > 2 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                audience = application_data[3] if len(application_data) > 3 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                problem = application_data[4] if len(application_data) > 4 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                rejected_text = (
                    f"‚ùå *–û–¢–ö–õ–û–ù–ï–ù–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                    f"üë§ *–û—Ç:* {user_name}\n"
                    f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                    f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                    f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                    f"üõ†Ô∏è *–û—Ç–∫–ª–æ–Ω–∏–ª:* {specialist_name}"
                )
                
                try:
                    await query.edit_message_caption(
                        caption=rejected_text,
                        reply_markup=None,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å: {e}, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç")
                    await query.edit_message_text(
                        text=rejected_text,
                        reply_markup=None,
                        parse_mode='Markdown'
                    )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞*\n\n"
                                 f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
                                 f"üí° *–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É*\n"
                                 f"üìû *–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º*",
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
            else:
                await query.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
                
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
                
    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–æ–π: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    try:
        user_id = update.message.from_user.id
        
        context.user_data.pop('waiting_for_problem_description', None)
        
        if user_id in bot_messages_to_delete:
            for msg_id in bot_messages_to_delete[user_id]:
                try:
                    await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
            bot_messages_to_delete[user_id] = []
        
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_main_keyboard()
        )
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}")
        return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        
        # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
        if chat_id != user_id:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user_data = db.get_user(user_id)
        
        if user_data:
            user_name = user_data[1]
            
            help_text = (
                f"üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_name}!*\n\n"
                "üöÄ *RANEPA.SYSTEM –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º!*\n\n"
                "üí° *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏:*\n"
                "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª*\n"
                "2. –£–∫–∞–∂–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é\n"
                "3. –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É\n"
                "4. –ü–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!\n\n"
                "üìä *–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?*\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats\n\n"
                "üõ†Ô∏è *–ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ?*\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"
            )
            
            await update.message.reply_text(
                help_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
        else:
            unregistered_text = (
                "üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RANEPA.SYSTEM!*\n\n"
                "üîê *–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è*\n\n"
                "üìù *–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ 2 –º–∏–Ω—É—Ç—ã:*\n"
                "1. –í–∞—à–µ –§–ò–û\n"
                "2. –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª–∞/–∫–∞—Ñ–µ–¥—Ä—ã\n\n"
                "üöÄ *–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!*\n"
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
            )
            
            await update.message.reply_text(
                unregistered_text,
                reply_markup=remove_keyboard(),
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")

async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞"""
    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    await update.message.reply_text(
        f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: `{chat_id}`\n"
        f"–í–∞—à ID: `{user_id}`\n"
        f"–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID –≤ config.py –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
        parse_mode='MarkdownV2'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        user_id = update.message.from_user.id
        
        is_specialist = user_id in SPECIALISTS
        
        today_stats = db.get_today_stats()
        all_time_stats = db.get_all_time_stats()
        wait_stats = db.get_average_waiting_time()
        
        stats_text = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*\n\n"
        
        stats_text += "üìÖ *–ó–ê –°–ï–ì–û–î–ù–Ø:*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {today_stats['total_today']}\n"
        
        status_emojis = {'new': 'üÜï', 'accepted': '‚úÖ', 'completed': 'üèÅ', 'rejected': '‚ùå'}
        for status, count in today_stats['status_stats'].items():
            emoji = status_emojis.get(status, 'üìã')
            stats_text += f"‚Ä¢ {emoji} {status}: {count}\n"
        
        stats_text += "\n‚è±Ô∏è *–í–†–ï–ú–Ø –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–Ø:*\n"
        if wait_stats['avg_wait_minutes'] > 0:
            stats_text += f"‚Ä¢ üü¢ –°—Ä–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç: *{wait_stats['avg_wait_minutes']} –º–∏–Ω*\n"
            stats_text += f"‚Ä¢ ‚úÖ –°—Ä–µ–¥–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ: *{wait_stats['avg_completion_minutes']} –º–∏–Ω*\n"
        else:
            stats_text += "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è\n"
        
        if today_stats['specialists_today']:
            stats_text += "\nüõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã —Å–µ–≥–æ–¥–Ω—è:*\n"
            for specialist, count in today_stats['specialists_today'].items():
                completed = today_stats['completed_today'].get(specialist, 0)
                stats_text += f"‚Ä¢ {specialist}: –ø—Ä–∏–Ω—è–ª {count}, –∑–∞–≤–µ—Ä—à–∏–ª {completed}\n"
        else:
            stats_text += "\nüõ†Ô∏è –°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –∑–∞—è–≤–æ–∫\n"
        
        stats_text += "\n‚è≥ *–ó–ê –í–°–ï –í–†–ï–ú–Ø:*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {all_time_stats['total_all_time']}\n"
        
        for status, count in all_time_stats['status_stats_all'].items():
            emoji = status_emojis.get(status, 'üìã')
            stats_text += f"‚Ä¢ {emoji} {status}: {count}\n"
        
        if all_time_stats['specialists_all']:
            stats_text += "\nüèÜ *–¢–æ–ø —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:*\n"
            for i, (specialist, count) in enumerate(all_time_stats['specialists_all'].items(), 1):
                completed = all_time_stats['completed_all'].get(specialist, 0)
                stats_text += f"{i}. {specialist}: {count} –∑–∞—è–≤–æ–∫ ({completed} –∑–∞–≤–µ—Ä—à–µ–Ω–æ)\n"
        
        if all_time_stats['top_users']:
            stats_text += "\nüë• *–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
            for i, (user_name, department, count) in enumerate(all_time_stats['top_users'], 1):
                stats_text += f"{i}. {user_name} ({department}): {count} –∑–∞—è–≤–æ–∫\n"
        
        if is_specialist:
            specialist_name = SPECIALISTS[user_id]
            personal_stats = db.get_specialist_stats(specialist_id=user_id)
            stats_text += f"\nüë§ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({specialist_name}):*\n"
            stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ: {personal_stats['total']}\n"
            stats_text += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {personal_stats['completed']}\n"
            stats_text += f"‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {personal_stats['today']}\n"
        
        stats_text += f"\nüïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        try:
            with open('stats.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=stats_text,
                    parse_mode='Markdown'
                )
            logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π stats.png")
            
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª stats.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def my_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    try:
        user_id = update.message.from_user.id
        
        if user_id not in SPECIALISTS:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Å–∏—Å—Ç–µ–º—ã")
            return
        
        specialist_name = SPECIALISTS[user_id]
        stats = db.get_specialist_stats(specialist_id=user_id)
        
        stats_text = f"üë§ *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê* ({specialist_name})\n\n"
        stats_text += f"üìä –í—Å–µ–≥–æ –ø—Ä–∏–Ω—è—Ç–æ –∑–∞—è–≤–æ–∫: {stats['total']}\n"
        stats_text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞—è–≤–æ–∫: {stats['completed']}\n"
        stats_text += f"üìÖ –ü—Ä–∏–Ω—è—Ç–æ —Å–µ–≥–æ–¥–Ω—è: {stats['today']}\n"
        
        if stats['total'] > 0:
            completion_rate = (stats['completed'] / stats['total']) * 100
            stats_text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completion_rate:.1f}%\n"
        
        stats_text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        try:
            with open('stats.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=stats_text,
                    parse_mode='Markdown'
                )
            logger.info("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π stats.png")
            
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª stats.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(stats_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def start_completion(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º"""
    query = update.callback_query
    await query.answer()
    
    try:
        application_id = int(query.data.split('_')[1])
        specialist_name = SPECIALISTS.get(query.from_user.id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        logger.info(f"START_COMPLETION: –ù–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{application_id} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist_name}")
        
        context.user_data.clear()
        context.user_data['completing_application_id'] = application_id
        context.user_data['specialist_name'] = specialist_name
        context.user_data['specialist_id'] = query.from_user.id
        
        logger.info(f"START_COMPLETION: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {context.user_data}")
        
        comment_text = (
            f"üìù *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{application_id}*\n\n"
            f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n\n"
            "üí° *–û–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
            "‚Ä¢ üîß *–ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:* (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –∑–∞–º–µ–Ω–∞)\n"
            "‚Ä¢ ‚öôÔ∏è *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:* (–¥–µ—Ç–∞–ª–∏, –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ, —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏)\n"
            "‚Ä¢ ‚úÖ *–†–µ–∑—É–ª—å—Ç–∞—Ç:* (–ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)\n"
            "‚Ä¢ üí¨ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:* (–∫–∞–∫ –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –±—É–¥—É—â–µ–º)\n\n"
            "üìã *–≠—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é*\n"
            "‚úçÔ∏è *–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:*"
        )
        
        sent_message = await context.bot.send_message(
            chat_id=CHAT_ID,
            text=comment_text,
            reply_to_message_id=query.message.message_id,
            parse_mode='Markdown'
        )
        
        context.user_data['comment_request_message_id'] = sent_message.message_id
        
        logger.info(f"START_COMPLETION: –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ì–†–£–ü–ü–£ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
        
        return COMMENT
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_completion: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏", show_alert=True)
        return ConversationHandler.END

async def get_solution_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ä–µ—à–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        logger.info("üéØ GET_SOLUTION_COMMENT: –§—É–Ω–∫—Ü–∏—è –í–´–ó–í–ê–ù–ê!")
        
        if update.message.chat_id != CHAT_ID:
            logger.warning(f"GET_SOLUTION_COMMENT: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –Ω–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞: {update.message.chat_id}")
            return ConversationHandler.END
        
        comment = update.message.text
        application_id = context.user_data.get('completing_application_id')
        specialist_name = context.user_data.get('specialist_name')
        
        logger.info(f"üìã GET_SOLUTION_COMMENT: –ó–∞—è–≤–∫–∞ #{application_id}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{comment}'")
        logger.info(f"üë§ GET_SOLUTION_COMMENT: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {specialist_name}")
        
        if not application_id:
            logger.error("‚ùå GET_SOLUTION_COMMENT: application_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_data!")
            return ConversationHandler.END
        
        try:
            comment_request_message_id = context.user_data.get('comment_request_message_id')
            if comment_request_message_id:
                await context.bot.delete_message(
                    chat_id=CHAT_ID,
                    message_id=comment_request_message_id
                )
                logger.info(f"GET_SOLUTION_COMMENT: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        
        logger.info(f"üîÑ GET_SOLUTION_COMMENT: –í—ã–∑–æ–≤ complete_application_with_comment...")
        success, application_data = db.complete_application_with_comment(application_id, comment)
        
        if success and application_data:
            logger.info(f"‚úÖ GET_SOLUTION_COMMENT: –ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤ –ë–î!")
            
            target_user_id = application_data[0]
            user_name = application_data[1]
            user_department = application_data[2]
            audience = application_data[3]
            problem = application_data[4]
            
            logger.info(f"üë§ GET_SOLUTION_COMMENT: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {target_user_id}")
            
            completed_text = (
                f"üèÅ *–ó–ê–í–ï–†–®–ï–ù–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                f"üë§ *–û—Ç:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üõ†Ô∏è *–í—ã–ø–æ–ª–Ω–∏–ª:* {specialist_name}\n"
                f"üí¨ *–†–µ—à–µ–Ω–∏–µ:* {comment}\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            try:
                message_id = context.bot_data.get(f"application_{application_id}")
                if message_id:
                    await context.bot.edit_message_caption(
                        chat_id=CHAT_ID,
                        message_id=message_id,
                        caption=completed_text,
                        parse_mode='Markdown'
                    )
                    logger.info(f"üì¢ GET_SOLUTION_COMMENT: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è GET_SOLUTION_COMMENT: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            
            if target_user_id and target_user_id != 0:
                try:
                    user_notification = (
                        f"üèÅ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                        f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                        f"üìã *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                        f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n\n"
                        f"üí° *–†–µ—à–µ–Ω–∏–µ:*\n"
                        f"{comment}\n\n"
                        f"‚úÖ *–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"‚≠ê *–°–µ–π—á–∞—Å –≤–∞—Å –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞*"
                    )
                    
                    try:
                        with open('zvend.png', 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=target_user_id,
                                photo=photo,
                                caption=user_notification,
                                parse_mode='Markdown'
                            )
                        logger.info(f"üì® GET_SOLUTION_COMMENT: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π zvend.png –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                    except FileNotFoundError:
                        logger.warning("–§–∞–π–ª zvend.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=user_notification,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ zvend.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=user_notification,
                            parse_mode='Markdown'
                        )
                    
                    await request_rating(update, context, application_id, specialist_name)
                    
                except Exception as e:
                    logger.error(f"‚ùå GET_SOLUTION_COMMENT: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è GET_SOLUTION_COMMENT: –ù–µ–≤–µ—Ä–Ω—ã–π user_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {target_user_id}")
            
            await update.message.reply_text(
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
                f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                f"‚≠ê –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                parse_mode='Markdown'
            )
            logger.info(f"üë®‚Äçüíº GET_SOLUTION_COMMENT: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É")
            
        else:
            logger.error(f"‚ùå GET_SOLUTION_COMMENT: –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.",
                parse_mode='Markdown'
            )
        
        context.user_data.clear()
        logger.info("üßπ GET_SOLUTION_COMMENT: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—Ç ConversationHandler.END")
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"üí• GET_SOLUTION_COMMENT: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        context.user_data.clear()
        return ConversationHandler.END

async def request_rating(update: Update, context: ContextTypes.DEFAULT_TYPE, application_id: int, specialist_name: str):
    """–ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    try:
        application_data = db.get_application_by_id(application_id)
        if not application_data:
            logger.error(f"REQUEST_RATING: –ó–∞—è–≤–∫–∞ #{application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        user_id = application_data[0]
        user_name = application_data[1] if len(application_data) > 1 else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"REQUEST_RATING: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
        
        rating_text = (
            f"‚≠ê *–û–¶–ï–ù–ö–ê –°–ü–ï–¶–ò–ê–õ–ò–°–¢–ê*\n\n"
            f"üìã *–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:* #{application_id}\n"
            f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n\n"
            "üí° *–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:*\n"
            "‚Ä¢ 1-3 ‚≠ê - –ü–ª–æ—Ö–æ (–±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã)\n"  
            "‚Ä¢ 4-7 ‚≠ê - –ù–æ—Ä–º–∞–ª—å–Ω–æ (–≤—Å–µ —Ä–µ—à–µ–Ω–æ)\n"
            "‚Ä¢ 8-10 ‚≠ê - –û—Ç–ª–∏—á–Ω–æ (–±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ)\n\n"
            "‚ú® *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å!*"
        )
        
        keyboard = get_rating_keyboard(application_id)
        logger.info(f"REQUEST_RATING: –°–æ–∑–¥–∞–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å application_id={application_id}")
        
        try:
            with open('stars1.png', 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=photo,
                    caption=rating_text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            logger.info(f"REQUEST_RATING: –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π stars1.png –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª stars1.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await context.bot.send_message(
                chat_id=user_id,
                text=rating_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ stars1.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await context.bot.send_message(
                chat_id=user_id,
                text=rating_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"REQUEST_RATING: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –æ—Ü–µ–Ω–∫–∏: {e}")

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        logger.info(f"‚≠ê HANDLE_RATING: –ü–æ–ª—É—á–µ–Ω callback_data: {query.data}")
        logger.info(f"‚≠ê HANDLE_RATING: –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query.from_user.id}")
        
        parts = query.data.split('_')
        if len(parts) != 3:
            logger.error(f"‚≠ê HANDLE_RATING: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞", show_alert=True)
            return
            
        application_id = int(parts[1])
        rating = int(parts[2])
        
        logger.info(f"‚≠ê HANDLE_RATING: –û—Ü–µ–Ω–∫–∞ {rating} –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
        
        if db.has_application_rating(application_id):
            logger.warning(f"‚≠ê HANDLE_RATING: –ó–∞—è–≤–∫–∞ #{application_id} —É–∂–µ –∏–º–µ–µ—Ç –æ—Ü–µ–Ω–∫—É")
            await query.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –∑–∞—è–≤–∫—É", show_alert=True)
            return
        
        application_data = db.get_application_by_id(application_id)
        if not application_data:
            logger.error(f"‚≠ê HANDLE_RATING: –ó–∞—è–≤–∫–∞ #{application_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        specialist_name = application_data[5] if len(application_data) > 5 else "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        
        db.save_rating(application_id, None, specialist_name, rating)
        
        thanks_text = (
            f"üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!*\n\n"
            f"üìã *–ó–∞—è–≤–∫–∞:* #{application_id}\n"
            f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
            f"‚≠ê *–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞:* {rating}/10\n\n"
            f"üí´ *–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞!*"
        )
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_caption(
                caption=thanks_text,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"‚≠ê HANDLE_RATING: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å —Ñ–æ—Ç–æ: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            try:
                await query.edit_message_text(
                    text=thanks_text,
                    parse_mode='Markdown'
                )
            except Exception as e2:
                logger.warning(f"‚≠ê HANDLE_RATING: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {e2}")
                # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(
                    chat_id=query.from_user.id,
                    text=thanks_text,
                    parse_mode='Markdown'
                )
        
        logger.info(f"‚≠ê HANDLE_RATING: –û—Ü–µ–Ω–∫–∞ {rating} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ #{application_id}")
        
    except Exception as e:
        logger.error(f"‚ùå HANDLE_RATING: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏", show_alert=True)

async def stars_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫"""
    try:
        stats = db.get_all_ratings_stats()
        
        if stats['total_count'] == 0:
            await update.message.reply_text(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫*\n\n"
                "‚ÑπÔ∏è *–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤*\n\n"
                "‚≠ê *–û—Ü–µ–Ω–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–æ–∫,*\n"
                "*–∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—é—Ç —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤*",
                parse_mode='Markdown'
            )
            return
        
        stars_text = "üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¶–ï–ù–û–ö –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í*\n\n"
        
        stars_text += "üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        stars_text += f"‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {stats['total_count']}\n"
        stars_text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['total_average']}/10\n\n"
        
        if stats['specialists']:
            stars_text += "üèÜ *–†–ï–ô–¢–ò–ù–ì –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í:*\n"
            for i, specialist in enumerate(stats['specialists'], 1):
                stars = "‚≠ê" * int(specialist['average'])
                stars_text += f"{i}. {specialist['name']}\n"
                stars_text += f"   ‚≠ê {specialist['average']}/10 ({specialist['count']} –æ—Ü–µ–Ω–æ–∫) {stars}\n\n"
        
        stars_text += "üìä *–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–¶–ï–ù–û–ö:*\n"
        for rating in range(1, 11):
            count = stats['distribution'].get(rating, 0)
            percentage = (count / stats['total_count']) * 100 if stats['total_count'] > 0 else 0
            bar = "‚ñà" * int(percentage / 5)
            stars_text += f"{rating}‚≠ê: {bar} {count} ({percentage:.1f}%)\n"
        
        stars_text += f"\nüïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await update.message.reply_text(
            stars_text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫",
            parse_mode='Markdown'
        )

async def complete_simple(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    query = update.callback_query
    await query.answer()
    
    try:
        application_id = int(query.data.split('_')[2])
        specialist_name = SPECIALISTS.get(query.from_user.id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        logger.info(f"COMPLETE_SIMPLE: –ü—Ä–æ—Å—Ç–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{application_id} —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist_name}")
        
        success, application_data = db.complete_application(application_id)
        
        if success and application_data:
            target_user_id = application_data[0]
            user_name = application_data[1]
            user_department = application_data[2]
            audience = application_data[3]
            problem = application_data[4]
            
            completed_text = (
                f"üèÅ *–ó–ê–í–ï–†–®–ï–ù–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                f"üë§ *–û—Ç:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üõ†Ô∏è *–í—ã–ø–æ–ª–Ω–∏–ª:* {specialist_name}\n"
                f"üí¨ *–†–µ—à–µ–Ω–∏–µ:* –ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            try:
                message_id = context.bot_data.get(f"application_{application_id}")
                if message_id:
                    await context.bot.edit_message_caption(
                        chat_id=CHAT_ID,
                        message_id=message_id,
                        caption=completed_text,
                        parse_mode='Markdown'
                    )
                    logger.info(f"COMPLETE_SIMPLE: –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.warning(f"COMPLETE_SIMPLE: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            
            if target_user_id and target_user_id != 0:
                try:
                    user_notification = (
                        f"üèÅ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                        f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                        f"üìã *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                        f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n\n"
                        f"üí° *–†–µ—à–µ–Ω–∏–µ:* –ü—Ä–æ–±–ª–µ–º–∞ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞\n\n"
                        f"‚úÖ *–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                        f"‚≠ê *–°–µ–π—á–∞—Å –≤–∞—Å –ø–æ–ø—Ä–æ—Å—è—Ç –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞*"
                    )
                    
                    try:
                        with open('zvend.png', 'rb') as photo:
                            await context.bot.send_photo(
                                chat_id=target_user_id,
                                photo=photo,
                                caption=user_notification,
                                parse_mode='Markdown'
                            )
                        logger.info(f"COMPLETE_SIMPLE: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π zvend.png –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}")
                    except FileNotFoundError:
                        logger.warning("–§–∞–π–ª zvend.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=user_notification,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ zvend.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=user_notification,
                            parse_mode='Markdown'
                        )
                    
                    await request_rating(update, context, application_id, specialist_name)
                    
                except Exception as e:
                    logger.error(f"COMPLETE_SIMPLE: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
            
            await query.message.reply_text(
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{application_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {specialist_name}!*\n"
                f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n"
                f"‚≠ê –ó–∞–ø—Ä–æ—Å –æ—Ü–µ–Ω–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                parse_mode='Markdown'
            )
            
            logger.info(f"COMPLETE_SIMPLE: –ó–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ complete_simple: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏", show_alert=True)

async def stats_zv_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫"""
    try:
        all_applications = db.get_all_applications()
        
        if not all_applications:
            await update.message.reply_text(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫*\n\n"
                "‚ÑπÔ∏è *–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫*",
                parse_mode='Markdown'
            )
            return
        
        status_groups = {
            'new': [],
            'accepted': [],
            'completed': [],
            'rejected': []
        }
        
        for app in all_applications:
            try:
                app_id = app[0]
                status = app[5] if len(app) > 5 else 'new'
                user_name = app[1] if app[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                audience = app[3] if app[3] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                problem = app[4][:50] + "..." if app[4] and len(app[4]) > 50 else (app[4] if app[4] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                specialist_name = app[6] if len(app) > 6 and app[6] else "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
                
                status_groups[status].append({
                    'id': app_id,
                    'user_name': user_name,
                    'audience': audience,
                    'problem': problem,
                    'specialist': specialist_name
                })
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ {app[0] if app else 'N/A'}: {e}")
                continue
        
        stats_text = "üìä *–°–¢–ê–¢–£–°–´ –í–°–ï–• –ó–ê–Ø–í–û–ö*\n\n"
        
        if status_groups['new']:
            stats_text += "üÜï *–ù–û–í–´–ï –ó–ê–Ø–í–ö–ò:*\n"
            for app in status_groups['new']:
                stats_text += f"‚Ä¢ #{app['id']} - {app['user_name']} ({app['audience']})\n"
                stats_text += f"  üìù {app['problem']}\n"
                stats_text += f"  üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {app['specialist']}\n\n"
            stats_text += "\n"
        
        if status_groups['accepted']:
            stats_text += "‚úÖ *–ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï:*\n"
            for app in status_groups['accepted']:
                stats_text += f"‚Ä¢ #{app['id']} - {app['user_name']} ({app['audience']})\n"
                stats_text += f"  üìù {app['problem']}\n"
                stats_text += f"  üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {app['specialist']}\n\n"
            stats_text += "\n"
        
        if status_groups['completed']:
            stats_text += "üèÅ *–ó–ê–í–ï–†–®–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò:*\n"
            for app in status_groups['completed']:
                stats_text += f"‚Ä¢ #{app['id']} - {app['user_name']} ({app['audience']})\n"
                stats_text += f"  üìù {app['problem']}\n"
                stats_text += f"  üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {app['specialist']}\n\n"
            stats_text += "\n"
        
        if status_groups['rejected']:
            stats_text += "‚ùå *–û–¢–ö–õ–û–ù–ï–ù–ù–´–ï –ó–ê–Ø–í–ö–ò:*\n"
            for app in status_groups['rejected']:
                stats_text += f"‚Ä¢ #{app['id']} - {app['user_name']} ({app['audience']})\n"
                stats_text += f"  üìù {app['problem']}\n"
                stats_text += f"  üë§ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {app['specialist']}\n\n"
        
        total_count = len(all_applications)
        new_count = len(status_groups['new'])
        accepted_count = len(status_groups['accepted'])
        completed_count = len(status_groups['completed'])
        rejected_count = len(status_groups['rejected'])
        
        stats_text += f"üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_count}\n"
        stats_text += f"‚Ä¢ üÜï –ù–æ–≤—ã–µ: {new_count}\n"
        stats_text += f"‚Ä¢ ‚úÖ –í —Ä–∞–±–æ—Ç–µ: {accepted_count}\n"
        stats_text += f"‚Ä¢ üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: {completed_count}\n"
        stats_text += f"‚Ä¢ ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: {rejected_count}\n\n"
        
        stats_text += f"üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        if len(stats_text) > 4000:
            parts = []
            current_part = ""
            lines = stats_text.split('\n')
            
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            
            await update.message.reply_text(parts[0], parse_mode='Markdown')
            
            for part in parts[1:]:
                await update.message.reply_text(part, parse_mode='Markdown')
        else:
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫",
            parse_mode='Markdown'
        )

async def return_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
    try:
        all_applications = db.get_all_applications()
        
        if not all_applications:
            await update.message.reply_text(
                "üìã *–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏*\n\n"
                "‚ÑπÔ∏è *–í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫*",
                parse_mode='Markdown'
            )
            return
        
        new_applications = [app for app in all_applications if app[5] == 'new']
        
        if not new_applications:
            await update.message.reply_text(
                "‚úÖ *–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏*\n\n"
                "üéâ *–û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É.*\n"
                "–ù–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ.",
                parse_mode='Markdown'
            )
            return
        
        return_text = "üìã *–ù–ï–ü–†–ò–ù–Ø–¢–´–ï –ó–ê–Ø–í–ö–ò*\n\n"
        
        for app in new_applications:
            app_id = app[0]
            user_name = app[1] if app[1] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            user_department = app[2] if app[2] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            audience = app[3] if app[3] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            problem = app[4][:100] + "..." if app[4] and len(app[4]) > 100 else (app[4] if app[4] else "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            created_date = app[7] if len(app) > 7 and app[7] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            
            try:
                if created_date != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
                    created_dt = datetime.fromisoformat(created_date)
                    created_str = created_dt.strftime('%d.%m.%Y %H:%M')
                else:
                    created_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            except:
                created_str = created_date
            
            message_id = db.get_application_message_id(app_id)
            
            return_text += f"üö® *–ó–∞—è–≤–∫–∞ #{app_id}*\n"
            return_text += f"üë§ *–û—Ç:* {user_name}\n"
            return_text += f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
            return_text += f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
            return_text += f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
            return_text += f"üïê *–°–æ–∑–¥–∞–Ω–∞:* {created_str}\n"
            
            if message_id:
                chat_id_str = str(CHAT_ID).replace('-100', '')
                message_link = f"https://t.me/c/{chat_id_str}/{message_id}"
                return_text += f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞—è–≤–∫–µ]({message_link})\n"
            else:
                return_text += f"üîó *–°—Å—ã–ª–∫–∞:* –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω)\n"
            
            return_text += "\n" + "‚îÄ" * 30 + "\n\n"
        
        total_new = len(new_applications)
        total_all = len(all_applications)
        
        return_text += f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        return_text += f"‚Ä¢ üÜï –ù–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö: {total_new}\n"
        return_text += f"‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total_all}\n"
        return_text += f"‚Ä¢ ‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö: {total_all - total_new}\n\n"
        
        return_text += f"üí° *–î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–∏–Ω—è—Ç—å'*"
        
        if len(return_text) > 4000:
            parts = []
            current_part = ""
            lines = return_text.split('\n')
            
            for line in lines:
                if len(current_part + line + '\n') > 4000:
                    parts.append(current_part)
                    current_part = line + '\n'
                else:
                    current_part += line + '\n'
            
            if current_part:
                parts.append(current_part)
            
            await update.message.reply_text(parts[0], parse_mode='Markdown', disable_web_page_preview=True)
            
            for part in parts[1:]:
                await update.message.reply_text(part, parse_mode='Markdown', disable_web_page_preview=True)
        else:
            await update.message.reply_text(return_text, parse_mode='Markdown', disable_web_page_preview=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫",
            parse_mode='Markdown'
        )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ transfer_handlers.py, –Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∑–¥–µ—Å—å –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
async def start_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        application_id = int(query.data.split('_')[1])
        current_specialist_name = SPECIALISTS.get(query.from_user.id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        logger.info(f"START_TRANSFER: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç {current_specialist_name}")
        
        transfer_text = (
            f"üîÑ *–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ #{application_id}*\n\n"
            f"üë§ *–¢–µ–∫—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {current_specialist_name}\n\n"
            "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:*"
        )
        
        await query.edit_message_caption(
            caption=transfer_text,
            reply_markup=get_specialists_keyboard(application_id),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_transfer: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞—è–≤–∫–∏", show_alert=True)

async def transfer_to_specialist(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É"""
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split('_')
        new_specialist_id = int(parts[2])
        application_id = int(parts[3])
        
        current_specialist_id = query.from_user.id
        current_specialist_name = SPECIALISTS.get(current_specialist_id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        new_specialist_name = SPECIALISTS.get(new_specialist_id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        logger.info(f"TRANSFER_TO_SPECIALIST: –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç {current_specialist_name} –∫ {new_specialist_name}")
        
        if current_specialist_id == new_specialist_id:
            await query.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ", show_alert=True)
            return
        
        success, application_data, previous_specialist = db.transfer_application(
            application_id, new_specialist_id, new_specialist_name
        )
        
        if success and application_data:
            target_user_id = application_data[0]
            user_name = application_data[1]
            user_department = application_data[2]
            audience = application_data[3]
            problem = application_data[4]
            
            transferred_text = (
                f"üîÑ *–ü–ï–†–ï–î–ê–ù–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                f"üë§ *–û—Ç:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üõ†Ô∏è *–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {new_specialist_name}\n"
                f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            try:
                await query.edit_message_caption(
                    caption=transferred_text,
                    reply_markup=get_completion_keyboard(application_id),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            
            try:
                await context.bot.send_message(
                    chat_id=new_specialist_id,
                    text=(
                        f"üîÑ *–í–∞–º –ø–µ—Ä–µ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ #{application_id}*\n\n"
                        f"üë§ *–û—Ç:* {user_name}\n"
                        f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                        f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                        f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                        f"üõ†Ô∏è *–ü–µ—Ä–µ–¥–∞–ª:* {current_specialist_name}\n\n"
                        f"üí° *–ó–∞—è–≤–∫–∞ –æ–∂–∏–¥–∞–µ—Ç –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–±—â–µ–º —á–∞—Ç–µ*"
                    ),
                    parse_mode='Markdown'
                )
                logger.info(f"TRANSFER_TO_SPECIALIST: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É {new_specialist_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–æ–≤–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")
            
            if target_user_id:
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=(
                            f"üîÑ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É*\n\n"
                            f"üõ†Ô∏è *–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {new_specialist_name}\n"
                            f"üí° *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏*\n\n"
                            f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}"
                        ),
                        parse_mode='Markdown'
                    )
                    logger.info(f"TRANSFER_TO_SPECIALIST: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_name}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
            
            try:
                await context.bot.send_message(
                    chat_id=current_specialist_id,
                    text=(
                        f"‚úÖ *–ó–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞*\n\n"
                        f"üõ†Ô∏è *–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {new_specialist_name}\n"
                        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name}\n"
                        f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}"
                    ),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")
            
            try:
                await query.message.reply_text(
                    f"üîÑ *{current_specialist_name}* –ø–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É *#{application_id}* —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É *{new_specialist_name}*",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É: {e}")
                
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ transfer_to_specialist: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞—è–≤–∫–∏", show_alert=True)

async def cancel_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer("–ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    try:
        application_id = int(query.data.split('_')[2])
        
        application_data = db.get_application_by_id(application_id)
        if application_data:
            user_name = application_data[1]
            user_department = application_data[2]
            audience = application_data[3]
            problem = application_data[4]
            specialist_name = application_data[5]
            
            application_text = (
                f"‚úÖ *–ü–†–ò–ù–Ø–¢–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                f"üë§ *–û—Ç:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
                f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await query.edit_message_caption(
                caption=application_text,
                reply_markup=get_completion_keyboard(application_id),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_transfer: {e}")
async def start_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    try:
        application_id = int(query.data.split('_')[1])
        current_specialist_name = SPECIALISTS.get(query.from_user.id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        logger.info(f"START_TRANSFER: –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç {current_specialist_name}")
        
        transfer_text = (
            f"üîÑ *–ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ #{application_id}*\n\n"
            f"üë§ *–¢–µ–∫—É—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {current_specialist_name}\n\n"
            "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏:*"
        )
        
        await query.edit_message_caption(
            caption=transfer_text,
            reply_markup=get_specialists_keyboard(application_id),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_transfer: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞—è–≤–∫–∏", show_alert=True)

# [file name]: handlers.py
# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é request_transfer_acceptance –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

async def request_transfer_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —É –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –í –ß–ê–¢–ï"""
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split('_')
        new_specialist_id = int(parts[2])
        application_id = int(parts[3])
        
        current_specialist_id = query.from_user.id
        current_specialist_name = SPECIALISTS.get(current_specialist_id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        new_specialist_name = SPECIALISTS.get(new_specialist_id, "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç")
        
        logger.info(f"REQUEST_TRANSFER: –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ #{application_id} –æ—Ç {current_specialist_name} –∫ {new_specialist_name}")
        
        if current_specialist_id == new_specialist_id:
            await query.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞—è–≤–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
        application_data = db.get_application_by_id(application_id)
        if application_data:
            user_name = application_data[1]
            user_department = application_data[2]
            audience = application_data[3]
            problem = application_data[4]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            context.bot_data[f'transfer_request_{application_id}'] = {
                'from_specialist_id': current_specialist_id,
                'from_specialist_name': current_specialist_name,
                'to_specialist_id': new_specialist_id,
                'to_specialist_name': new_specialist_name,
                'application_id': application_id,
                'original_message_id': query.message.message_id
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –í –ß–ê–¢–ï —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
            transfer_request_text = (
                f"üîÑ *–ó–ê–ü–†–û–° –ü–ï–†–ï–î–ê–ß–ò –ó–ê–Ø–í–ö–ò*\n\n"
                f"üìã *–ó–∞—è–≤–∫–∞:* #{application_id}\n"
                f"üë§ *–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üõ†Ô∏è *–ü–µ—Ä–µ–¥–∞–µ—Ç:* {current_specialist_name}\n"
                f"üë®‚Äçüíº *–ù–∞–∑–Ω–∞—á–µ–Ω:* {new_specialist_name}\n\n"
                f"üí° *{new_specialist_name}, –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —ç—Ç—É –∑–∞—è–≤–∫—É?*"
            )
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ–±—â–∏–π —á–∞—Ç
                transfer_message = await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=transfer_request_text,
                    reply_markup=get_transfer_acceptance_keyboard(application_id),
                    parse_mode='Markdown'
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º
                context.bot_data[f'transfer_request_{application_id}']['request_message_id'] = transfer_message.message_id
                
                logger.info(f"REQUEST_TRANSFER: –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {new_specialist_name}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
                await query.edit_message_caption(
                    caption=(
                        f"‚è≥ *–û–ñ–ò–î–ê–ù–ò–ï –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ü–ï–†–ï–î–ê–ß–ò*\n\n"
                        f"üìã *–ó–∞—è–≤–∫–∞:* #{application_id}\n"
                        f"üõ†Ô∏è *–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∞:* {new_specialist_name}\n"
                        f"‚è∞ *–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —á–∞—Ç–µ...*"
                    ),
                    parse_mode='Markdown'
                )
                
                await query.answer(f"‚úÖ –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –¥–ª—è {new_specialist_name}", show_alert=False)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —á–∞—Ç: {e}")
                await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ —á–∞—Ç", show_alert=True)
        else:
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ request_transfer_acceptance: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏", show_alert=True)

# –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handle_transfer_acceptance:

async def handle_transfer_acceptance(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è/–≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –ò–ó –ß–ê–¢–ê"""
    query = update.callback_query
    await query.answer()
    
    try:
        parts = query.data.split('_')
        action = parts[1]  # accept, decline –∏–ª–∏ return
        application_id = int(parts[2])
        
        transfer_data = context.bot_data.get(f'transfer_request_{application_id}')
        if not transfer_data:
            await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞—á–∏ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        from_specialist_id = transfer_data['from_specialist_id']
        from_specialist_name = transfer_data['from_specialist_name']
        to_specialist_id = transfer_data['to_specialist_id']
        to_specialist_name = transfer_data['to_specialist_name']
        original_message_id = transfer_data['original_message_id']
        request_message_id = transfer_data.get('request_message_id')
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–∑ —á–∞—Ç–∞
        if request_message_id:
            try:
                await context.bot.delete_message(
                    chat_id=CHAT_ID,
                    message_id=request_message_id
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º: {e}")
        
        if action == 'accept':
            # –ü—Ä–∏–Ω—è—Ç–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏
            logger.info(f"TRANSFER_ACCEPTED: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {to_specialist_name} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É #{application_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –ë–î
            success, application_data, previous_specialist = db.transfer_application(
                application_id, to_specialist_id, to_specialist_name
            )
            
            if success and application_data:
                user_id = application_data[0]
                user_name = application_data[1]
                user_department = application_data[2]
                audience = application_data[3]
                problem = application_data[4]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
                transferred_text = (
                    f"‚úÖ *–ü–ï–†–ï–î–ê–ù–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                    f"üë§ *–û—Ç:* {user_name}\n"
                    f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                    f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                    f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                    f"üõ†Ô∏è *–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {to_specialist_name}\n"
                    f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
                
                try:
                    await context.bot.edit_message_caption(
                        chat_id=CHAT_ID,
                        message_id=original_message_id,
                        caption=transferred_text,
                        reply_markup=get_completion_keyboard(application_id),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏
                try:
                    await context.bot.send_message(
                        chat_id=CHAT_ID,
                        text=f"‚úÖ *{to_specialist_name}* –ø—Ä–∏–Ω—è–ª –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—è–≤–∫–∏ *#{application_id}*",
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
                try:
                    await context.bot.send_message(
                        chat_id=from_specialist_id,
                        text=(
                            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{application_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞*\n\n"
                            f"üõ†Ô∏è *–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {to_specialist_name}\n"
                            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name}\n"
                            f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}"
                        ),
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=(
                                f"üîÑ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{application_id} –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É*\n\n"
                                f"üõ†Ô∏è *–ù–æ–≤—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {to_specialist_name}\n"
                                f"üí° *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏*\n\n"
                                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}"
                            ),
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç–µ –æ–± –æ—à–∏–±–∫–µ
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞—è–≤–∫—É #{application_id}*\n\n–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥—Ä—É–≥–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º.",
                    parse_mode='Markdown'
                )
        
        elif action == 'decline':
            # –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏
            logger.info(f"TRANSFER_DECLINED: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {to_specialist_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{application_id}")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                application_data = db.get_application_by_id(application_id)
                if application_data:
                    user_name = application_data[1]
                    user_department = application_data[2]
                    audience = application_data[3]
                    problem = application_data[4]
                    current_specialist_name = application_data[5] if len(application_data) > 5 else from_specialist_name
                    
                    application_text = (
                        f"‚úÖ *–ü–†–ò–ù–Ø–¢–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                        f"üë§ *–û—Ç:* {user_name}\n"
                        f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                        f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                        f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                        f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {current_specialist_name}\n"
                        f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                    )
                    
                    await context.bot.edit_message_caption(
                        chat_id=CHAT_ID,
                        message_id=original_message_id,
                        caption=application_text,
                        reply_markup=get_completion_keyboard(application_id),
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            try:
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ùå *{to_specialist_name}* –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—è–≤–∫–∏ *#{application_id}*\n\n–ó–∞—è–≤–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —É *{from_specialist_name}*",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}")
        
        elif action == 'return':
            # –í–æ–∑–≤—Ä–∞—Ç –∑–∞—è–≤–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
            logger.info(f"TRANSFER_RETURNED: –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {to_specialist_name} –≤–µ—Ä–Ω—É–ª –∑–∞—è–≤–∫—É #{application_id} –æ–±—Ä–∞—Ç–Ω–æ")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                application_data = db.get_application_by_id(application_id)
                if application_data:
                    user_name = application_data[1]
                    user_department = application_data[2]
                    audience = application_data[3]
                    problem = application_data[4]
                    
                    application_text = (
                        f"‚úÖ *–ü–†–ò–ù–Ø–¢–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                        f"üë§ *–û—Ç:* {user_name}\n"
                        f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                        f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                        f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                        f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {from_specialist_name}\n"
                        f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                    )
                    
                    await context.bot.edit_message_caption(
                        chat_id=CHAT_ID,
                        message_id=original_message_id,
                        caption=application_text,
                        reply_markup=get_completion_keyboard(application_id),
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ —á–∞—Ç–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
            try:
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"üîÑ *{to_specialist_name}* –≤–µ—Ä–Ω—É–ª –∑–∞—è–≤–∫—É *#{application_id}* –æ–±—Ä–∞—Ç–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É *{from_specialist_name}*",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç: {e}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ
            try:
                application_data = db.get_application_by_id(application_id)
                if application_data:
                    user_name = application_data[1]
                    audience = application_data[3]
                    
                    await context.bot.send_message(
                        chat_id=from_specialist_id,
                        text=(
                            f"üîÑ *–ó–∞—è–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤–∞–º*\n\n"
                            f"üìã *–ó–∞—è–≤–∫–∞:* #{application_id}\n"
                            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {user_name}\n"
                            f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                            f"üõ†Ô∏è *–í–µ—Ä–Ω—É–ª:* {to_specialist_name}\n\n"
                            f"üí° *–ó–∞—è–≤–∫–∞ —Å–Ω–æ–≤–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –≤–∞—Å*"
                        ),
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É: {e}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if f'transfer_request_{application_id}' in context.bot_data:
            del context.bot_data[f'transfer_request_{application_id}']
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_transfer_acceptance: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏", show_alert=True)
async def cancel_transfer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–º–µ–Ω–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"""
    query = update.callback_query
    await query.answer("–ü–µ—Ä–µ–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    try:
        application_id = int(query.data.split('_')[2])
        
        application_data = db.get_application_by_id(application_id)
        if application_data:
            user_name = application_data[1]
            user_department = application_data[2]
            audience = application_data[3]
            problem = application_data[4]
            specialist_name = application_data[5] if len(application_data) > 5 else "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
            
            application_text = (
                f"‚úÖ *–ü–†–ò–ù–Ø–¢–ê –ó–ê–Ø–í–ö–ê #{application_id}*\n\n"
                f"üë§ *–û—Ç:* {user_name}\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {user_department}\n"
                f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem}\n"
                f"üõ†Ô∏è *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
                f"‚è±Ô∏è *–ü—Ä–∏–Ω—è—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            )
            
            await query.edit_message_caption(
                caption=application_text,
                reply_markup=get_completion_keyboard(application_id),
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_transfer: {e}")
async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    try:
        feedback_text = (
            "üìû *–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨*\n\n"
            "üí¨ *–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:*\n\n"
            "üëâ [–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏](https://t.me/+YDotufXOEaBhOTIy)\n\n"
            "üìã *–í —á–∞—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ:*\n"
            "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏—è\n"
            "‚Ä¢ –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
            "‚ö° *–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º!*"
        )
        
        try:
            with open('obrat.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=feedback_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                    # –£–±—Ä–∞–Ω–æ: disable_web_page_preview=False
                )
            logger.info("–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π obrat.png")
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª obrat.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(
                feedback_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ obrat.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(
                feedback_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_feedback: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            reply_markup=get_main_keyboard()
        )

async def faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–µ—à–µ–Ω–∏—è"""
    try:
        faq_text = (
            "‚ùì *–ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´*\n\n"
            
            "üîß *–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:*\n"
            "‚Ä¢ *–ö–æ–º–ø—å—é—Ç–µ—Ä –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ, –∫–∞–±–µ–ª–∏, –∫–Ω–æ–ø–∫—É –≤–∫–ª—é—á–µ–Ω–∏—è\n"
            "‚Ä¢ *–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞:* –ó–∞–∫—Ä–æ–π—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä\n"
            "‚Ä¢ *–°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω:* –ó–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –æ—à–∏–±–∫–∏ –∏ —Å–æ–æ–±—â–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n\n"
            
            "üåê *–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º:*\n"  
            "‚Ä¢ *–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª—å Wi-Fi, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä\n"
            "‚Ä¢ *–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç:* –ó–∞–∫—Ä–æ–π—Ç–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã, –≤–∏–¥–µ–æ –≤ HD –∫–∞—á–µ—Å—Ç–≤–µ\n"
            "‚Ä¢ *–ù–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å–∞–π—Ç—ã:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä\n\n"
            
            "üñ®Ô∏è *–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º:*\n"
            "‚Ä¢ *–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±—É–º–∞–≥—É, –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏\n"
            "‚Ä¢ *–ó–∞–º—è—Ç–∏–µ –±—É–º–∞–≥–∏:* –ê–∫–∫—É—Ä–∞—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∏—Ç–µ –±—É–º–∞–≥—É –ø–æ —Å—Ç—Ä–µ–ª–∫–µ\n"
            "‚Ä¢ *–ë–ª–µ–¥–Ω–∞—è –ø–µ—á–∞—Ç—å:* –ó–∞–º–µ–Ω–∏—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂\n\n"
            
            "üì∫ *–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–µ–∫—Ç–æ—Ä–æ–º:*\n"
            "‚Ä¢ *–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª—å HDMI/VGA, –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª–∞\n"
            "‚Ä¢ *–ù–µ—Ç –∑–≤—É–∫–∞:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å, –∞—É–¥–∏–æ–∫–∞–±–µ–ª—å\n"
            "‚Ä¢ *–ü–µ—Ä–µ–≥—Ä–µ–≤:* –î–∞–π—Ç–µ –æ—Å—Ç—ã—Ç—å 30 –º–∏–Ω—É—Ç\n\n"
            
            "‚öôÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ:*\n"
            "‚Ä¢ *–ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ\n"
            "‚Ä¢ *–ù–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:* –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å\n\n"
            
            "üí° *–ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:*\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ —Ä–∞–±–æ—Ç—É –∫–∞–∂–¥—ã–µ 10-15 –º–∏–Ω—É—Ç\n"
            "‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤\n"
            "‚Ä¢ –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ü–û\n"
            "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã\n\n"
            
            "üìû *–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:*\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã\n\n"
            "‚ö° *–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å:* –ù–∞–∂–º–∏—Ç–µ *¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª*"
        )
        
        await update.message.reply_text(
            faq_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ",
            reply_markup=get_main_keyboard()
        )

async def equipment_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º"""
    try:
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
        if user_id not in SPECIALISTS:
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ database.py
        all_applications = db.get_all_applications()
        
        if not all_applications:
            await update.message.reply_text(
                "üìä *–ê–ù–ê–õ–ò–¢–ò–ö–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø*\n\n"
                "‚ÑπÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                parse_mode='Markdown'
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        audience_stats = {}
        problem_stats = {}
        
        for app in all_applications:
            if len(app) > 3:
                audience = app[3]  # –∞—É–¥–∏—Ç–æ—Ä–∏—è
                problem = app[4]   # –ø—Ä–æ–±–ª–µ–º–∞
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º
                if audience:
                    audience_stats[audience] = audience_stats.get(audience, 0) + 1
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
                problem_lower = problem.lower()
                if any(word in problem_lower for word in ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø–∫', '—Å–∏—Å—Ç–µ–º–Ω–∏–∫']):
                    problem_stats['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã'] = problem_stats.get('üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 0) + 1
                elif any(word in problem_lower for word in ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–µ—Ç—å', 'wi-fi', 'wifi']):
                    problem_stats['üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç'] = problem_stats.get('üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 0) + 1
                elif any(word in problem_lower for word in ['–ø—Ä–∏–Ω—Ç–µ—Ä', '–ø–µ—á–∞—Ç—å', '–∫–∞—Ä—Ç—Ä–∏–¥–∂', '—Å–∫–∞–Ω–µ—Ä']):
                    problem_stats['üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã'] = problem_stats.get('üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã', 0) + 1
                elif any(word in problem_lower for word in ['–ø—Ä–æ–µ–∫—Ç–æ—Ä', '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä', '—Ç–≤', '—ç–∫—Ä–∞–Ω']):
                    problem_stats['üì∫ –ü—Ä–æ–µ–∫—Ç–æ—Ä—ã/–¢–í'] = problem_stats.get('üì∫ –ü—Ä–æ–µ–∫—Ç–æ—Ä—ã/–¢–í', 0) + 1
                elif any(word in problem_lower for word in ['–∑–≤—É–∫', '–∞—É–¥–∏–æ', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', '–¥–∏–Ω–∞–º–∏–∫']):
                    problem_stats['üé§ –ê—É–¥–∏–æ'] = problem_stats.get('üé§ –ê—É–¥–∏–æ', 0) + 1
                elif any(word in problem_lower for word in ['–ø–æ', '–ø—Ä–æ–≥—Ä–∞–º–º', '—Å–æ—Ñ—Ç', '—É—Å—Ç–∞–Ω–æ–≤–∫']):
                    problem_stats['‚öôÔ∏è –ü–û'] = problem_stats.get('‚öôÔ∏è –ü–û', 0) + 1
                else:
                    problem_stats['‚ùì –î—Ä—É–≥–æ–µ'] = problem_stats.get('‚ùì –î—Ä—É–≥–æ–µ', 0) + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        top_audiences = sorted(audience_stats.items(), key=lambda x: x[1], reverse=True)[:10]
        top_problems = sorted(problem_stats.items(), key=lambda x: x[1], reverse=True)
        
        stats_text = "üìä *–ê–ù–ê–õ–ò–¢–ò–ö–ê –û–ë–û–†–£–î–û–í–ê–ù–ò–Ø*\n\n"
        
        # –¢–æ–ø –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π
        stats_text += "üè¢ *–¢–û–ü –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–£–î–ò–¢–û–†–ò–ô:*\n"
        if top_audiences:
            for i, (audience, count) in enumerate(top_audiences, 1):
                stats_text += f"{i}. *{audience}* - {count} –∑–∞—è–≤–æ–∫\n"
        else:
            stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        stats_text += "\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
        stats_text += "üîß *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú –ü–†–û–ë–õ–ï–ú:*\n"
        if top_problems:
            for category, count in top_problems:
                percentage = (count / len(all_applications)) * 100
                stats_text += f"‚Ä¢ {category}: {count} ({percentage:.1f}%)\n"
        else:
            stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
        stats_text += "\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text += f"üìà *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(all_applications)}\n"
        stats_text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—É–¥–∏—Ç–æ—Ä–∏–π: {len(audience_stats)}\n"
        stats_text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–±–ª–µ–º: {len(problem_stats)}\n\n"
        
        stats_text += f"üïê *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        
        await update.message.reply_text(
            stats_text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ equipment_stats: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            parse_mode='Markdown'
        )
async def handle_my_applications_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'"""
    await my_applications(update, context)

async def handle_faq_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'FAQ' —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π"""
    try:
        faq_text = (
            "‚ùì *–ß–ê–°–¢–û –ó–ê–î–ê–í–ê–ï–ú–´–ï –í–û–ü–†–û–°–´*\n\n"
            
            "üîß *–ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º:*\n"
            "‚Ä¢ –ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ\n"
            "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ\n"
            "‚Ä¢ –°–∏–Ω–∏–π —ç–∫—Ä–∞–Ω: –∑–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –æ—à–∏–±–∫–∏\n\n"
            
            "üåê *–ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º:*\n"  
            "‚Ä¢ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–æ—É—Ç–µ—Ä\n"
            "‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–æ—Ä—Ä–µ–Ω—Ç—ã\n"
            "‚Ä¢ –ù–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Å–∞–π—Ç—ã: —Å–º–µ–Ω–∏—Ç–µ –±—Ä–∞—É–∑–µ—Ä\n\n"
            
            "üñ®Ô∏è *–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º:*\n"
            "‚Ä¢ –ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –±—É–º–∞–≥—É –∏ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∏\n"
            "‚Ä¢ –ó–∞–º—è—Ç–∏–µ –±—É–º–∞–≥–∏: –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏–∑–≤–ª–µ–∫–∏—Ç–µ\n"
            "‚Ä¢ –ë–ª–µ–¥–Ω–∞—è –ø–µ—á–∞—Ç—å: –∑–∞–º–µ–Ω–∏—Ç–µ –∫–∞—Ä—Ç—Ä–∏–¥–∂\n\n"
            
            "üì∫ *–ü—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–µ–∫—Ç–æ—Ä–æ–º:*\n"
            "‚Ä¢ –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª—å\n"
            "‚Ä¢ –ù–µ—Ç –∑–≤—É–∫–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å\n"
            "‚Ä¢ –ü–µ—Ä–µ–≥—Ä–µ–≤: –¥–∞–π—Ç–µ –æ—Å—Ç—ã—Ç—å 30 –º–∏–Ω—É—Ç\n\n"
            
            "‚ö° *–ë—ã—Å—Ç—Ä–∞—è –ø–æ–º–æ—â—å:* –ù–∞–∂–º–∏—Ç–µ *¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª*"
        )
        
        try:
            with open('faq.png', 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=faq_text,
                    reply_markup=get_main_keyboard(),
                    parse_mode='Markdown'
                )
            logger.info("FAQ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π faq.png")
        except FileNotFoundError:
            logger.warning("–§–∞–π–ª faq.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(
                faq_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ faq.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
            await update.message.reply_text(
                faq_text,
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_faq_button: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ FAQ",
            reply_markup=get_main_keyboard()
        )
async def my_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    try:
        user_id = update.message.from_user.id
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ database.py —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn = sqlite3.connect('applications.db')
        cursor = conn.cursor()
        cursor.execute('''
            SELECT id, audience, problem, status, created_date, specialist_name, completed_date 
            FROM applications 
            WHERE user_id = ? 
            ORDER BY id DESC
        ''', (user_id,))
        applications = cursor.fetchall()
        conn.close()
        
        if not applications:
            await update.message.reply_text(
                "üìã *–í–ê–®–ò –ó–ê–Ø–í–ö–ò*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
                "üí° –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É? –ù–∞–∂–º–∏—Ç–µ *¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª*",
                reply_markup=get_main_keyboard(),
                parse_mode='Markdown'
            )
            return
        
        applications_text = "üìã *–í–ê–®–ò –ó–ê–Ø–í–ö–ò*\n\n"
        
        for app in applications:
            app_id, audience, problem, status, created_date, specialist_name, completed_date = app
            
            # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
            status_emojis = {
                'new': 'üÜï',
                'accepted': 'üõ†Ô∏è',
                'completed': '‚úÖ',
                'rejected': '‚ùå'
            }
            
            emoji = status_emojis.get(status, 'üìù')
            status_texts = {
                'new': '–û–∂–∏–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞',
                'accepted': '–í —Ä–∞–±–æ—Ç–µ',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', 
                'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
            }
            
            status_text = status_texts.get(status, status)
            
            applications_text += f"{emoji} *–ó–∞—è–≤–∫–∞ #{app_id}*\n"
            applications_text += f"üìç *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
            applications_text += f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {problem[:80]}{'...' if len(problem) > 80 else ''}\n"
            applications_text += f"üìä *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
            
            if specialist_name:
                applications_text += f"üë®‚Äçüíº *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç:* {specialist_name}\n"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                created_dt = datetime.fromisoformat(created_date)
                created_str = created_dt.strftime('%d.%m.%Y %H:%M')
                applications_text += f"üïê *–°–æ–∑–¥–∞–Ω–∞:* {created_str}\n"
            except:
                applications_text += f"üïê *–°–æ–∑–¥–∞–Ω–∞:* {created_date}\n"
            
            if completed_date and status == 'completed':
                try:
                    completed_dt = datetime.fromisoformat(completed_date)
                    completed_str = completed_dt.strftime('%d.%m.%Y %H:%M')
                    applications_text += f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {completed_str}\n"
                except:
                    applications_text += f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {completed_date}\n"
            
            applications_text += "‚îÄ" * 30 + "\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total = len(applications)
        new_count = len([a for a in applications if a[3] == 'new'])
        accepted_count = len([a for a in applications if a[3] == 'accepted'])
        completed_count = len([a for a in applications if a[3] == 'completed'])
        
        applications_text += f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê:*\n"
        applications_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}\n"
        applications_text += f"‚Ä¢ üÜï –û–∂–∏–¥–∞—é—Ç: {new_count}\n"
        applications_text += f"‚Ä¢ üõ†Ô∏è –í —Ä–∞–±–æ—Ç–µ: {accepted_count}\n"
        applications_text += f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_count}\n\n"
        
        applications_text += "üí° *–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª*"
        
        await update.message.reply_text(
            applications_text,
            reply_markup=get_main_keyboard(),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_applications: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫",
            reply_markup=get_main_keyboard()
        )

async def handle_my_applications_button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'"""
    await my_applications(update, context)
async def get_help_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏"""
    try:
        user_id = update.message.from_user.id
        user_message = update.message.text
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏
        if user_message in ["üíª –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–º–æ—â—å", "üîß –ü–æ–º–æ—â—å –≤ –æ—á–Ω–æ–π —Ñ–æ—Ä–º–µ"]:
            context.user_data['help_type'] = user_message
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            try:
                if user_id in bot_messages_to_delete:
                    for msg_id in bot_messages_to_delete[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                    bot_messages_to_delete[user_id] = []
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
            problem_text = (
                "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã*\n\n"
                "üí° *–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:*\n\n"
                "‚Ä¢ üíª *–ö–æ–º–ø—å—é—Ç–µ—Ä* - –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è, –∏–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n"
                "‚Ä¢ üåê *–ò–Ω—Ç–µ—Ä–Ω–µ—Ç* - –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–æ–ª–≥–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n"
                "‚Ä¢ üñ®Ô∏è *–ü—Ä–∏–Ω—Ç–µ—Ä* - –∑–∞–º–µ–Ω–∞ –∫–∞—Ä—Ç—Ä–∏–¥–∂–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞, –∑–∞–º—è—Ç–∏–µ, —Å–∫–∞–Ω–µ—Ä\n"
                "‚Ä¢ üì∫ *–ü—Ä–æ–µ–∫—Ç–æ—Ä/–¢–µ–ª–µ–≤–∏–∑–æ—Ä* - –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–≤—É–∫–∞\n"
                "‚Ä¢ ‚öôÔ∏è *–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ* - —É—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º\n"
                "‚Ä¢ üé§ *–ê—É–¥–∏–æ* - –∑–∞–ø–∏—Å—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ ‚ùì *–î—Ä—É–≥–æ–µ* - –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ\n\n"
                "üìù *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ üëá*"
            )
            
            try:
                with open('typepr.png', 'rb') as photo:
                    sent_message = await update.message.reply_photo(
                        photo=photo,
                        caption=problem_text,
                        reply_markup=get_problem_keyboard(),
                        parse_mode='Markdown'
                    )
                logger.info("–í—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π typepr.png")
            except FileNotFoundError:
                logger.warning("–§–∞–π–ª typepr.png –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                sent_message = await update.message.reply_text(
                    problem_text,
                    reply_markup=get_problem_keyboard(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ typepr.png: {e}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç")
                sent_message = await update.message.reply_text(
                    problem_text,
                    reply_markup=get_problem_keyboard(),
                    parse_mode='Markdown'
                )
            
            bot_messages_to_delete[user_id].append(sent_message.message_id)
            return PROBLEM
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        elif user_message == "üîô –ù–∞–∑–∞–¥":
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
            try:
                if user_id in bot_messages_to_delete:
                    for msg_id in bot_messages_to_delete[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: {e}")
                    bot_messages_to_delete[user_id] = []
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É –∞—É–¥–∏—Ç–æ—Ä–∏–∏
            sent_message = await update.message.reply_text(
                "–í –∫–∞–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞?",
                reply_markup=remove_keyboard()
            )
            
            bot_messages_to_delete[user_id].append(sent_message.message_id)
            return AUDIENCE
        
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–º–æ—â–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=get_help_type_keyboard()
            )
            return HELP_TYPE
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_help_type: {e}")
        return ConversationHandler.END
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ —á–∞—Ç–µ)"""
    try:
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
        if chat_id != CHAT_ID:
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤",
                parse_mode='Markdown'
            )
            return
            
        if user_id not in SPECIALISTS:
            await update.message.reply_text(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º",
                parse_mode='Markdown'
            )
            return
        
        help_text = (
            "üõ†Ô∏è *–ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–ü–ï–¶–ò–ê–õ–ò–°–¢–û–í*\n\n"
            
            "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚Ä¢ `/stats` - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ `/statszv` - —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ `/return` - –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏\n"
            "‚Ä¢ `/stars` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ü–µ–Ω–æ–∫\n"
            "‚Ä¢ `/mystats` - –≤–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ `/equipment` - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ `/my_id` - —É–∑–Ω–∞—Ç—å –≤–∞—à ID\n\n"
            
            "üîÑ *–î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞—è–≤–∫–∞–º–∏:*\n"
            "‚Ä¢ *‚úÖ –ü—Ä–∏–Ω—è—Ç—å* - –≤–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É\n"
            "‚Ä¢ *‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å* - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n"
            "‚Ä¢ *üí¨ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º* - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è\n"
            "‚Ä¢ *‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å* - –∑–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
            "‚Ä¢ *üîÑ –ü–µ—Ä–µ–¥–∞—Ç—å –¥—Ä—É–≥–æ–º—É* - –ø–µ—Ä–µ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –∫–æ–ª–ª–µ–≥–µ\n\n"
            
            "üìä *–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã:*\n"
            "1. *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* ‚Üí –ü—Ä–∏–Ω—è—Ç—å/–û—Ç–∫–ª–æ–Ω–∏—Ç—å\n"
            "2. *–ü—Ä–∏–Ω—è—Ç–∞—è –∑–∞—è–≤–∫–∞* ‚Üí –ó–∞–≤–µ—Ä—à–∏—Ç—å/–ü–µ—Ä–µ–¥–∞—Ç—å\n"
            "3. *–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –∑–∞—è–≤–∫–∞* ‚Üí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É\n\n"
            
            "üí° *–°–æ–≤–µ—Ç—ã:*\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫–∏ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
            
            "‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –∑–∞—è–≤–∫–∞–º–∏!*"
        )
        
        await update.message.reply_text(
            help_text,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
# [file name]: handlers.py
# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é obossan_command –Ω–∞ —ç—Ç—É –≤–µ—Ä—Å–∏—é:

async def obossan_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ—Ö–≤–∞–ª—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (50/50 –º–µ–∂–¥—É –¥–≤—É–º—è —Ñ—Ä–∞–∑–∞–º–∏)"""
    try:
        chat_id = update.message.chat_id
        user_id = update.message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        if not update.message.reply_to_message:
            await update.message.reply_text(
                "‚ùå *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:*\n\n"
                "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ `/obossan`",
                parse_mode='Markdown'
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
        specialist_id = update.message.reply_to_message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
        if specialist_id not in SPECIALISTS:
            await update.message.reply_text(
                "‚ùå *–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º*\n\n"
                "–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏",
                parse_mode='Markdown'
            )
            return
        
        specialist_name = SPECIALISTS[specialist_id]
        
        # 50/50 –º–µ–∂–¥—É –¥–≤—É–º—è —Ñ—Ä–∞–∑–∞–º–∏
        import random
        if random.choice([True, False]):
            compliment = f"*{specialist_name}* - –ù–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è –æ–±–æ—Å—Å–∞–Ω! –ü–æ–∑–¥—Ä–∞–≤–∏–º –µ–≥–æ!"
        else:
            compliment = f"*{specialist_name}* - –ë—ã–ª –æ–±–æ—Å—Å–∞–Ω! –ê—Ö–∞—Ö–∞—Ö–∞—Ö("
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ö–≤–∞–ª—É
        await update.message.reply_text(
            compliment,
            parse_mode='Markdown'
        )
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–æ–º–∞–Ω–¥—É —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        try:
            await update.message.delete()
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π: {e}")
        
        logger.info(f"OBOSSAN: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ—Ö–≤–∞–ª–∏–ª —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {specialist_name} (—Ñ—Ä–∞–∑–∞: {'–æ–≥–æ–Ω—å' if '–æ–≥–æ–Ω—å' in compliment else '–∑–≤–µ–∑–¥–∞'})")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ obossan_command: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã",
            parse_mode='Markdown'
        )