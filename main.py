import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler, CallbackQueryHandler
from telegram import BotCommand, BotCommandScopeAllPrivateChats, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, FIO, DEPARTMENT, AUDIENCE, PROBLEM, COMMENT, HELP_TYPE
from handlers import (
    start, get_fio, get_department, start_application, 
    get_audience, get_problem, cancel, handle_message, 
    get_chat_id, handle_application_action, stats_command, my_stats,
    start_completion, get_solution_comment, stats_zv_command, return_command,
    stars_command, handle_rating, complete_simple, handle_feedback,
    start_transfer, request_transfer_acceptance, handle_transfer_acceptance, cancel_transfer,
    my_applications, faq_command, equipment_stats,
    handle_my_applications_button, handle_faq_button, handle_menu_button, get_help_type,
    help_command, obossan_command
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def webapp_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App"""
    keyboard = [
        [InlineKeyboardButton(
            "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", 
            web_app=WebAppInfo(url="https://your-domain.com/webapp/")
        )]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üöÄ *–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π:*",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def setup_commands(application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("app", "–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        BotCommand("myapps", "–ú–æ–∏ –∑–∞—è–≤–∫–∏"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    await application.bot.set_my_commands(commands, scope=BotCommandScopeAllPrivateChats())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
        completion_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(start_completion, pattern="^complete_\\d+$")],
            states={
                COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_solution_comment)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_message=False
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(completion_handler)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        application.add_handler(ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, get_fio)],
                DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, get_department)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        ))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
        application.add_handler(ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$') & filters.ChatType.PRIVATE, start_application)],
            states={
                AUDIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, get_audience)],
                HELP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, get_help_type)],
                PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, get_problem)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        ))
        
        # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK
        application.add_handler(CallbackQueryHandler(handle_rating, pattern="^rate_"))
        application.add_handler(CallbackQueryHandler(complete_simple, pattern="^complete_simple_"))
        application.add_handler(CallbackQueryHandler(handle_application_action, pattern="^(accept|reject)_"))
        application.add_handler(CallbackQueryHandler(start_transfer, pattern="^transfer_\\d+$"))
        application.add_handler(CallbackQueryHandler(request_transfer_acceptance, pattern="^transfer_to_"))
        application.add_handler(CallbackQueryHandler(handle_transfer_acceptance, pattern="^transfer_(accept|decline|return)_"))
        application.add_handler(CallbackQueryHandler(cancel_transfer, pattern="^cancel_transfer_"))
        
        # –ö–û–ú–ê–ù–î–´
        application.add_handler(CommandHandler("app", webapp_command))
        application.add_handler(CommandHandler("myapps", my_applications, filters.ChatType.PRIVATE))
        application.add_handler(CommandHandler("faq", faq_command, filters.ChatType.PRIVATE))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(CommandHandler("statszv", stats_zv_command))
        application.add_handler(CommandHandler("return", return_command))
        application.add_handler(CommandHandler("stars", stars_command))
        application.add_handler(CommandHandler("mystats", my_stats))
        application.add_handler(CommandHandler("equipment", equipment_stats))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("my_id", get_chat_id))
        application.add_handler(CommandHandler("obossan", obossan_command))
        
        # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
        application.add_handler(MessageHandler(filters.Regex('^üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É$') & filters.ChatType.PRIVATE, start_application))
        application.add_handler(MessageHandler(filters.Regex('^üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏$') & filters.ChatType.PRIVATE, handle_my_applications_button))
        application.add_handler(MessageHandler(filters.Regex('^‚ùì FAQ$') & filters.ChatType.PRIVATE, handle_faq_button))
        application.add_handler(MessageHandler(filters.Regex('^üìû –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å$') & filters.ChatType.PRIVATE, handle_feedback))
        application.add_handler(MessageHandler(filters.Regex('^üè† –ú–µ–Ω—é$') & filters.ChatType.PRIVATE, handle_menu_button))
        
        # –û–ë–´–ß–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & filters.ChatType.PRIVATE, handle_message))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        application.post_init = setup_commands
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()